#
#  Command-line completion for bx.
#
_bx()
{
    local current="${COMP_WORDS[COMP_CWORD]}"

    # Generated from XML data source.
    local commands="
        address-decode
        address-embed
        address-encode
        base16-decode
        base16-encode
        base58-decode
        base58-encode
        base58check-decode
        base58check-encode
        base64-decode
        base64-encode
        bitcoin160
        bitcoin256
        btc-to-satoshi
        cert-new
        cert-public
        ec-add
        ec-add-secrets
        ec-multiply
        ec-multiply-secrets
        ec-new
        ec-to-address
        ec-to-ek
        ec-to-public
        ec-to-wif
        ek-address
        ek-new
        ek-public
        ek-public-to-address
        ek-public-to-ec
        ek-to-address
        ek-to-ec
        electrum-new
        electrum-to-seed
        fetch-balance
        fetch-header
        fetch-height
        fetch-history
        fetch-public-key
        fetch-stealth
        fetch-tx
        fetch-tx-index
        fetch-utxo
        hd-new
        hd-private
        hd-public
        hd-to-ec
        hd-to-public
        help
        input-set
        input-sign
        input-validate
        message-sign
        message-validate
        mnemonic-new
        mnemonic-to-seed
        qrcode
        ripemd160
        satoshi-to-btc
        script-decode
        script-encode
        script-to-address
        send-tx
        send-tx-node
        send-tx-p2p
        settings
        sha160
        sha256
        sha512
        stealth-decode
        stealth-encode
        stealth-public
        stealth-secret
        stealth-shared
        token-new
        tx-decode
        tx-encode
        tx-sign
        uri-decode
        uri-encode
        validate-tx
        watch-address
        watch-stealth
        watch-tx
        wif-to-ec
        wif-to-public
        wrap-decode
        wrap-encode
    "

    if [[ $COMP_CWORD == 1 ]]; then
        COMPREPLY=( `compgen -W "$commands" -- $current` )
        return
    fi

    local command="${COMP_WORDS[1]}"
    local options="--config --help -c -h"
    # Generate per-command options here
    local address_decode_opt="--format -f"
    local address_embed_opt="--version -v"
    local address_encode_opt=""
    local base16_decode_opt=""
    local base16_encode_opt=""
    local base58_decode_opt=""
    local base58_encode_opt=""
    local base58check_decode_opt="--format -f"
    local base58check_encode_opt="--version -v"
    local base64_decode_opt=""
    local base64_encode_opt=""
    local bitcoin160_opt=""
    local bitcoin256_opt=""
    local btc_to_satoshi_opt=""
    local cert_new_opt=""
    local cert_public_opt=""
    local ec_add_opt=""
    local ec_add_secrets_opt=""
    local ec_multiply_opt=""
    local ec_multiply_secrets_opt=""
    local ec_new_opt=""
    local ec_to_address_opt="--version -v"
    local ec_to_ek_opt="--uncompressed --version -u -v"
    local ec_to_public_opt="--uncompressed -u"
    local ec_to_wif_opt="--uncompressed --version -u -v"
    local ek_address_opt="--uncompressed --version -u -v"
    local ek_new_opt="--uncompressed --version -u -v"
    local ek_public_opt="--uncompressed --version -u -v"
    local ek_public_to_address_opt=""
    local ek_public_to_ec_opt=""
    local ek_to_address_opt=""
    local ek_to_ec_opt=""
    local electrum_new_opt="--language --version -l -v"
    local electrum_to_seed_opt="--language --passphrase --version -l -p -v"
    local fetch_balance_opt="--format -f"
    local fetch_header_opt="--format --hash --height -f -s -t"
    local fetch_height_opt=""
    local fetch_history_opt="--format -f"
    local fetch_public_key_opt=""
    local fetch_stealth_opt="--format --height -f -t"
    local fetch_tx_opt="--format --witness -f -w"
    local fetch_tx_index_opt="--format -f"
    local fetch_utxo_opt="--algorithm --format -a -f"
    local hd_new_opt="--version -v"
    local hd_private_opt="--hard --index -d -i"
    local hd_public_opt="--hard --index --public_version --secret_version -d -i -p -s"
    local hd_to_ec_opt="--public_version --secret_version -p -s"
    local hd_to_public_opt="--version -v"
    local help_opt=""
    local input_set_opt="--index -i"
    local input_sign_opt="--anyone --index --sign_type -a -i -s"
    local input_validate_opt="--index -i"
    local message_sign_opt=""
    local message_validate_opt=""
    local mnemonic_new_opt="--language -l"
    local mnemonic_to_seed_opt="--language --passphrase -l -p"
    local qrcode_opt="--density --insensitive --module_size --png --margin_size --scheme --version -d -i -m -p -r -s -v"
    local ripemd160_opt=""
    local satoshi_to_btc_opt=""
    local script_decode_opt=""
    local script_encode_opt=""
    local script_to_address_opt="--version -v"
    local send_tx_opt=""
    local send_tx_node_opt="--port --host -p -t"
    local send_tx_p2p_opt="--nodes -n"
    local settings_opt="--format -f"
    local sha160_opt=""
    local sha256_opt=""
    local sha512_opt=""
    local stealth_decode_opt="--format -f"
    local stealth_encode_opt="--filter --signatures --version -f -s -v"
    local stealth_public_opt=""
    local stealth_secret_opt=""
    local stealth_shared_opt=""
    local token_new_opt="--lot --sequence -l -s"
    local tx_decode_opt="--format -f"
    local tx_encode_opt="--input --lock_time --output --script_version --version -i -l -o -s -v"
    local tx_sign_opt=""
    local uri_decode_opt="--format -f"
    local uri_encode_opt="--amount --label --message --request -a -l -m -r"
    local validate_tx_opt=""
    local watch_address_opt="--duration -d"
    local watch_stealth_opt="--duration -d"
    local watch_tx_opt="--format -f"
    local wif_to_ec_opt=""
    local wif_to_public_opt=""
    local wrap_decode_opt="--format -f"
    local wrap_encode_opt="--version -v"

    local command_opt="${command//-/_}_opt"
    COMPREPLY=( `compgen -W "$options ${!command_opt}" -- $current` )
}
complete -F _bx bx
